WAComponent subclass: #CredentialsInputComponent	instanceVariableNames: 'username password errorText'	classVariableNames: ''	package: 'CuOOra-WebUI'!!CredentialsInputComponent methodsFor: 'private' stamp: 'sufficientname 4/12/2021 09:04'!continueAs: aUser	self session user: aUser.	self answer! !!CredentialsInputComponent methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 05:07'!password	^ password! !!CredentialsInputComponent methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 05:07'!username: aString	username := aString! !!CredentialsInputComponent methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 05:07'!username	^ username! !!CredentialsInputComponent methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 05:07'!password: aString	password := aString! !!CredentialsInputComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 06:57'!renderSubmitButtonOn: aCanvas	self subclassResponsibility! !!CredentialsInputComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 16:44'!renderContentOn: aCanvas	aCanvas div		class: 'row';		with: [ aCanvas div				class: 'column column-50 column-offset-25';				with: [ self renderFormErrorOn: aCanvas.					aCanvas form						with: [ aCanvas label: 'username'.							aCanvas textInput on: #username of: self.							aCanvas break.							aCanvas label: 'password'.							aCanvas passwordInput on: #password of: self.							aCanvas break.							aCanvas break.							self renderSubmitButtonOn: aCanvas ].					aCanvas horizontalRule.					self renderAlternativeOn: aCanvas ] ]! !!CredentialsInputComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 09:25'!renderFormErrorOn: aCanvas	(errorText) ifNotNil: [ aCanvas label class: 'error-text'; with: errorText ]! !!CredentialsInputComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 06:59'!renderAlternativeOn: aCanvas	self subclassResponsibility! !WAComponent subclass: #CuOOraComponent	instanceVariableNames: 'parent'	classVariableNames: ''	package: 'CuOOra-WebUI'!!CuOOraComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:08'!renderAnswer: anAnswer on: aCanvas	aCanvas		render:			((AnswerComponent with: anAnswer)				userCallback: [ :user | parent goToUserProfile: user ])! !!CuOOraComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 08:29'!renderQuestions: aQuestionCollection on: aCanvas	aQuestionCollection		do: [ :question | self renderQuestion: question on: aCanvas ]! !!CuOOraComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 08:53'!renderQuestion: aQuestion on: aCanvas	aCanvas		render:			((QuestionComponent with: aQuestion)				questionCallback: [ :question | parent goToQuestion: question ];				userCallback: [ :user | parent goToUserProfile: user ];				topicCallback: [ :topic | parent goToTopic: topic ])! !!CuOOraComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:09'!renderAnswers: anAnswerCollection on: aCanvas	anAnswerCollection do: [ :answer | self renderAnswer: answer on: aCanvas ]! !!CuOOraComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 08:43'!parent	^ parent! !!CuOOraComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 08:44'!parent: aWAComponent	parent := aWAComponent! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraComponent class	instanceVariableNames: ''!!CuOOraComponent class methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 08:43'!parent: aWAComponent	^ self new		parent: aWAComponent;		yourself! !WAComponent subclass: #CuOOraEntryComponent	instanceVariableNames: 'cuOOraTask signInComponent'	classVariableNames: ''	package: 'CuOOra-WebUI'!!CuOOraEntryComponent commentStamp: 'sufficientname 4/12/2021 10:17' prior: 0!| app |CuOOra soleInstanceFillapp := WAAdmin register: CuOOraEntryComponent asApplicationAt: 'cuoora'.app sessionClass: CuOOraSession.!!CuOOraEntryComponent methodsFor: 'hooks' stamp: 'sufficientname 4/12/2021 07:58'!children	^ Array with: cuOOraTask! !!CuOOraEntryComponent methodsFor: 'hooks' stamp: 'sufficientname 4/12/2021 07:55'!style"milligram from: https://milligram.io""navbar from: https://gist.github.com/primaryobjects/5a86955d0419d64ae7f5c401bb704983"	^'/*!! * Milligram v1.3.0 * https://milligram.github.io * * Copyright (c) 2017 CJ Patoilo * Licensed under the MIT license */*,*:after,*:before{box-sizing:inherit}html{box-sizing:border-box;font-size:62.5%}body{color:#606c76;font-family:"Roboto", "Helvetica Neue", "Helvetica", "Arial", sans-serif;font-size:1.6em;font-weight:300;letter-spacing:.01em;line-height:1.6}blockquote{border-left:0.3rem solid #d1d1d1;margin-left:0;margin-right:0;padding:1rem 1.5rem}blockquote *:last-child{margin-bottom:0}.button,button,input[type="button"],input[type="reset"],input[type="submit"]{background-color:#9b4dca;border:0.1rem solid #9b4dca;border-radius:.4rem;color:#fff;cursor:pointer;display:inline-block;font-size:1.1rem;font-weight:700;height:3.8rem;letter-spacing:.1rem;line-height:3.8rem;padding:0 3.0rem;text-align:center;text-decoration:none;text-transform:uppercase;white-space:nowrap}.button:focus,.button:hover,button:focus,button:hover,input[type="button"]:focus,input[type="button"]:hover,input[type="reset"]:focus,input[type="reset"]:hover,input[type="submit"]:focus,input[type="submit"]:hover{background-color:#606c76;border-color:#606c76;color:#fff;outline:0}.button[disabled],button[disabled],input[type="button"][disabled],input[type="reset"][disabled],input[type="submit"][disabled]{cursor:default;opacity:.5}.button[disabled]:focus,.button[disabled]:hover,button[disabled]:focus,button[disabled]:hover,input[type="button"][disabled]:focus,input[type="button"][disabled]:hover,input[type="reset"][disabled]:focus,input[type="reset"][disabled]:hover,input[type="submit"][disabled]:focus,input[type="submit"][disabled]:hover{background-color:#9b4dca;border-color:#9b4dca}.button.button-outline,button.button-outline,input[type="button"].button-outline,input[type="reset"].button-outline,input[type="submit"].button-outline{background-color:transparent;color:#9b4dca}.button.button-outline:focus,.button.button-outline:hover,button.button-outline:focus,button.button-outline:hover,input[type="button"].button-outline:focus,input[type="button"].button-outline:hover,input[type="reset"].button-outline:focus,input[type="reset"].button-outline:hover,input[type="submit"].button-outline:focus,input[type="submit"].button-outline:hover{background-color:transparent;border-color:#606c76;color:#606c76}.button.button-outline[disabled]:focus,.button.button-outline[disabled]:hover,button.button-outline[disabled]:focus,button.button-outline[disabled]:hover,input[type="button"].button-outline[disabled]:focus,input[type="button"].button-outline[disabled]:hover,input[type="reset"].button-outline[disabled]:focus,input[type="reset"].button-outline[disabled]:hover,input[type="submit"].button-outline[disabled]:focus,input[type="submit"].button-outline[disabled]:hover{border-color:inherit;color:#9b4dca}.button.button-clear,button.button-clear,input[type="button"].button-clear,input[type="reset"].button-clear,input[type="submit"].button-clear{background-color:transparent;border-color:transparent;color:#9b4dca}.button.button-clear:focus,.button.button-clear:hover,button.button-clear:focus,button.button-clear:hover,input[type="button"].button-clear:focus,input[type="button"].button-clear:hover,input[type="reset"].button-clear:focus,input[type="reset"].button-clear:hover,input[type="submit"].button-clear:focus,input[type="submit"].button-clear:hover{background-color:transparent;border-color:transparent;color:#606c76}.button.button-clear[disabled]:focus,.button.button-clear[disabled]:hover,button.button-clear[disabled]:focus,button.button-clear[disabled]:hover,input[type="button"].button-clear[disabled]:focus,input[type="button"].button-clear[disabled]:hover,input[type="reset"].button-clear[disabled]:focus,input[type="reset"].button-clear[disabled]:hover,input[type="submit"].button-clear[disabled]:focus,input[type="submit"].button-clear[disabled]:hover{color:#9b4dca}code{background:#f4f5f6;border-radius:.4rem;font-size:86%;margin:0 .2rem;padding:.2rem .5rem;white-space:nowrap}pre{background:#f4f5f6;border-left:0.3rem solid #9b4dca;overflow-y:hidden}pre>code{border-radius:0;display:block;padding:1rem 1.5rem;white-space:pre}hr{border:0;border-top:0.1rem solid #f4f5f6;margin:3.0rem 0}input[type="email"],input[type="number"],input[type="password"],input[type="search"],input[type="tel"],input[type="text"],input[type="url"],textarea,select{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0.1rem solid #d1d1d1;border-radius:.4rem;box-shadow:none;box-sizing:inherit;height:3.8rem;padding:.6rem 1.0rem;width:100%}input[type="email"]:focus,input[type="number"]:focus,input[type="password"]:focus,input[type="search"]:focus,input[type="tel"]:focus,input[type="text"]:focus,input[type="url"]:focus,textarea:focus,select:focus{border-color:#9b4dca;outline:0}select{background:url("data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="14" viewBox="0 0 29 14" width="29"><path fill="#d1d1d1" d="M9.37727 3.625l5.08154 6.93523L19.54036 3.625"/></svg>") center right no-repeat;padding-right:3.0rem}select:focus{background-image:url("data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="14" viewBox="0 0 29 14" width="29"><path fill="#9b4dca" d="M9.37727 3.625l5.08154 6.93523L19.54036 3.625"/></svg>")}textarea{min-height:6.5rem}label,legend{display:block;font-size:1.6rem;font-weight:700;margin-bottom:.5rem}fieldset{border-width:0;padding:0}input[type="checkbox"],input[type="radio"]{display:inline}.label-inline{display:inline-block;font-weight:normal;margin-left:.5rem}.container{margin:0 auto;max-width:112.0rem;padding:0 2.0rem;position:relative;width:100%}.row{display:flex;flex-direction:column;padding:0;width:100%}.row.row-no-padding{padding:0}.row.row-no-padding>.column{padding:0}.row.row-wrap{flex-wrap:wrap}.row.row-top{align-items:flex-start}.row.row-bottom{align-items:flex-end}.row.row-center{align-items:center}.row.row-stretch{align-items:stretch}.row.row-baseline{align-items:baseline}.row .column{display:block;flex:1 1 auto;margin-left:0;max-width:100%;width:100%}.row .column.column-offset-10{margin-left:10%}.row .column.column-offset-20{margin-left:20%}.row .column.column-offset-25{margin-left:25%}.row .column.column-offset-33,.row .column.column-offset-34{margin-left:33.3333%}.row .column.column-offset-50{margin-left:50%}.row .column.column-offset-66,.row .column.column-offset-67{margin-left:66.6666%}.row .column.column-offset-75{margin-left:75%}.row .column.column-offset-80{margin-left:80%}.row .column.column-offset-90{margin-left:90%}.row .column.column-10{flex:0 0 10%;max-width:10%}.row .column.column-20{flex:0 0 20%;max-width:20%}.row .column.column-25{flex:0 0 25%;max-width:25%}.row .column.column-33,.row .column.column-34{flex:0 0 33.3333%;max-width:33.3333%}.row .column.column-40{flex:0 0 40%;max-width:40%}.row .column.column-50{flex:0 0 50%;max-width:50%}.row .column.column-60{flex:0 0 60%;max-width:60%}.row .column.column-66,.row .column.column-67{flex:0 0 66.6666%;max-width:66.6666%}.row .column.column-75{flex:0 0 75%;max-width:75%}.row .column.column-80{flex:0 0 80%;max-width:80%}.row .column.column-90{flex:0 0 90%;max-width:90%}.row .column .column-top{align-self:flex-start}.row .column .column-bottom{align-self:flex-end}.row .column .column-center{-ms-grid-row-align:center;align-self:center}@media (min-width: 40rem){.row{flex-direction:row;margin-left:-1.0rem;width:calc(100% + 2.0rem)}.row .column{margin-bottom:inherit;padding:0 1.0rem}}a{color:#9b4dca;text-decoration:none}a:focus,a:hover{color:#606c76}dl,ol,ul{list-style:none;margin-top:0;padding-left:0}dl dl,dl ol,dl ul,ol dl,ol ol,ol ul,ul dl,ul ol,ul ul{font-size:90%;margin:1.5rem 0 1.5rem 3.0rem}ol{list-style:decimal inside}ul{list-style:circle inside}.button,button,dd,dt,li{margin-bottom:1.0rem}fieldset,input,select,textarea{margin-bottom:1.5rem}blockquote,dl,figure,form,ol,p,pre,table,ul{margin-bottom:2.5rem}table{border-spacing:0;width:100%}td,th{border-bottom:0.1rem solid #e1e1e1;padding:1.2rem 1.5rem;text-align:left}td:first-child,th:first-child{padding-left:0}td:last-child,th:last-child{padding-right:0}b,strong{font-weight:bold}p{margin-top:0}h1,h2,h3,h4,h5,h6{font-weight:300;letter-spacing:-.1rem;margin-bottom:2.0rem;margin-top:0}h1{font-size:4.6rem;line-height:1.2}h2{font-size:3.6rem;line-height:1.25}h3{font-size:2.8rem;line-height:1.3}h4{font-size:2.2rem;letter-spacing:-.08rem;line-height:1.35}h5{font-size:1.8rem;letter-spacing:-.05rem;line-height:1.5}h6{font-size:1.6rem;letter-spacing:0;line-height:1.4}img{max-width:100%}.clearfix:after{clear:both;content:" ";display:table}.float-left{float:left}.float-right{float:right}/*# sourceMappingURL=milligram.min.css.map *//*!! * NavBar *  * https://gist.github.com/primaryobjects/5a86955d0419d64ae7f5c401bb704983 */.navbar {  margin-bottom: 10px;}.navbar ul {    list-style-type: none;    margin: 0;    padding: 0;    overflow: hidden;    background-color: #606c76;}.navbar li {    float: left;    margin-bottom: 0;}.navbar li a {    display: block;    color: white;    text-align: center;    padding: 14px 16px;    text-decoration: none;}.navbar li a:hover {    background-color: #ab5dda;}/*!! * Custom *  * */.reaction {	font-weight: normal;	color: #b8c9d7;}.reaction:hover {	font-weight: bold;	color: #9b4dca;}.reacted {	font-weight: bold;	color: #9b4dca;}.reacted:hover { 	font-weight: bold;	color: #9b4dca;}.button-small {  font-size: .8rem;  height: 2.8rem;  line-height: 2.8rem;  padding: 0 1.5rem;}.topic {  background: #f1e4f9;  border-radius: 5px;  display: inline-block;  padding: 5px 20px 2px 23px;  margin: 0 10px 10px 0;}.error-text {	color: red;}'! !!CuOOraEntryComponent methodsFor: 'initialization' stamp: 'sufficientname 4/12/2021 09:00'!initialize	super initialize.	signInComponent := SignInComponent new.	cuOOraTask := CuOOraTask new! !!CuOOraEntryComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:00'!signOut	self session user: nil.	cuOOraTask := CuOOraTask new! !!CuOOraEntryComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:46'!renderNavbarOn: aCanvas	aCanvas div		class: 'navbar';		with: [ aCanvas unorderedList				class: 'menu';				with: [ aCanvas listItem						with: [ aCanvas anchor								callback: [ cuOOraTask goToHomeComponent ];								with: 'CuOOra' ].					self isUserSignedIn						ifTrue: [ aCanvas listItem								with: [ aCanvas anchor										callback: [ cuOOraTask goToTopics ];										with: 'Topics' ].							aCanvas listItem								with: [ aCanvas anchor										callback: [ cuOOraTask goToUserProfile: self session user ];										with: self session user username ].							aCanvas listItem								with: [ aCanvas anchor										callback: [ self signOut ];										with: 'Sign Out' ] ] ] ].	aCanvas horizontalRule! !!CuOOraEntryComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 08:57'!renderContentOn: aCanvas	aCanvas div		class: 'container';		with: [ self renderNavbarOn: aCanvas. 			self isUserSignedIn				ifFalse: [ aCanvas render: signInComponent ]				ifTrue: [ aCanvas render: cuOOraTask ] ]! !!CuOOraEntryComponent methodsFor: 'testing' stamp: 'sufficientname 4/12/2021 08:06'!isUserSignedIn	^ self session user isNotNil! !WASession subclass: #CuOOraSession	instanceVariableNames: 'user'	classVariableNames: ''	package: 'CuOOra-WebUI'!!CuOOraSession methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 04:55'!user: aUser	user := aUser! !!CuOOraSession methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 04:55'!user	^ user! !WATask subclass: #CuOOraTask	instanceVariableNames: 'signInComponent mainComponent'	classVariableNames: ''	package: 'CuOOra-WebUI'!!CuOOraTask methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:33'!goToTopic: aTopic	self call: ((TopicDetailComponent parent: self) topic: aTopic)! !!CuOOraTask methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 08:49'!goToHomeComponent	self call: (HomeComponent parent: self)! !!CuOOraTask methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 08:42'!goToUserProfile: aUser	self call: ((UserProfileComponent parent: self) user: aUser)! !!CuOOraTask methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:40'!goToTopics	self call: (TopicListComponent parent: self)! !!CuOOraTask methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 08:41'!goToQuestion: aQuestion	self call: ((QuestionDetailComponent parent: self) question: aQuestion)! !!CuOOraTask methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 08:49'!go	self goToHomeComponent! !!CuOOraTask methodsFor: 'initialization' stamp: 'sufficientname 4/12/2021 08:50'!initialize	super initialize.	signInComponent := SignInComponent new! !CuOOraComponent subclass: #HomeComponent	instanceVariableNames: 'component'	classVariableNames: ''	package: 'CuOOra-WebUI'!!HomeComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 08:28'!renderContentOn: aCanvas	aCanvas anchor		class: 'button';		callback: [ self call: QuestionEditorComponent new ];		with: 'Post question'.	aCanvas heading with: 'Relevant questions:'.	self renderQuestions: self session user relevantQuestions on: aCanvas! !WAComponent subclass: #PostComponent	instanceVariableNames: 'post userCallback'	classVariableNames: ''	package: 'CuOOra-WebUI'!!PostComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/10/2021 10:01'!dislike	post registerDislikeBy: self session user! !!PostComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/11/2021 22:05'!goToUser	^ userCallback		ifNotNil: [ userCallback value: post user ]! !!PostComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 04:01'!delete	post delete! !!PostComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/10/2021 10:01'!like	post registerLikeBy: self session user! !!PostComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 08:34'!renderDeleteButtonOn: aCanvas	post user == self session user		ifFalse: [ ^ self ].	aCanvas text: ' - '.	aCanvas anchor		class: 'button button-small';		callback: [ self delete ];		with: 'delete'! !!PostComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 09:57'!renderTextOn: aCanvas	aCanvas paragraph with: post text.! !!PostComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 12:39'!renderLikeButtonOn: aCanvas	aCanvas anchor		class:			((post wasLikedBy: self session user)				ifTrue: [ 'reacted' ]				ifFalse: [ 'reaction' ]);		callback: [ self like ];		with: '▲' , post likes size printString! !!PostComponent methodsFor: 'rendering' stamp: 'sufficientname 4/11/2021 21:46'!renderUserOn: aCanvas	aCanvas span		with: [ aCanvas text: 'by: '.			aCanvas anchor				callback: [ self goToUser ];				with: [ aCanvas						text: post user username , ' (' , post user score printString , ')' ].			aCanvas text: ' - '.			aCanvas				text: 'at: ' , post createdAt asStringYMDHM ]! !!PostComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 12:46'!renderDislikeButtonOn: aCanvas	aCanvas anchor		class:			((post wasDislikedBy: self session user)				ifTrue: [ 'reacted' ]				ifFalse: [ 'reaction' ]);		callback: [ self dislike ];		with: '▼' , post dislikes size printString! !!PostComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 12:58'!renderReactionButtonsOn: aCanvas	self renderLikeButtonOn: aCanvas.	self renderDislikeButtonOn: aCanvas.	aCanvas span: ' | score: ', post score printString ! !!PostComponent methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 10:06'!post: aPost	post := aPost! !!PostComponent methodsFor: 'accessing' stamp: 'sufficientname 4/11/2021 21:43'!userCallback: aBlock	userCallback := aBlock! !!PostComponent methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 10:06'!post	^ post! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PostComponent class	instanceVariableNames: ''!!PostComponent class methodsFor: 'instance creation' stamp: 'sufficientname 4/10/2021 10:09'!with: aPost	^ self new post: aPost; yourself! !PostComponent subclass: #AnswerComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-WebUI'!!AnswerComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 04:17'!renderContentOn: aCanvas	aCanvas div		class: 'answer';		with: [ self renderUserOn: aCanvas.			self renderDeleteButtonOn: aCanvas.			aCanvas break.			self renderReactionButtonsOn: aCanvas.			self renderTextOn: aCanvas ]! !WAComponent subclass: #PostEditorComponent	instanceVariableNames: 'text errorText'	classVariableNames: ''	package: 'CuOOra-WebUI'!!PostEditorComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 01:51'!post	self subclassResponsibility! !!PostEditorComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 03:35'!cancel	self answer: nil! !!PostEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 02:24'!formTitle	self subclassResponsibility! !!PostEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 01:58'!text: aString	text := aString! !!PostEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 01:37'!text	^ text! !!PostEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:45'!renderSubmitButtonOn: aCanvas	aCanvas submitButton		class: 'button column';		callback: [ self post ];		with: 'Post'! !!PostEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:41'!renderCancelButtonOn: aCanvas	aCanvas anchor		class: 'button column';		callback: [ self answer ];		with: 'Cancel'! !!PostEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:43'!renderContentOn: aCanvas	aCanvas div class: 'row'; with: [	aCanvas div class: 'column';		with: [ aCanvas heading level3 with: self formTitle.			self renderFormErrorOn: aCanvas.			aCanvas form				with: [ self renderFormFieldsOn: aCanvas.					aCanvas break.					self renderSubmitButtonOn: aCanvas ].			self renderCancelButtonOn: aCanvas ] ]! !!PostEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 01:56'!renderFormFieldsOn: aCanvas	self subclassResponsibility! !!PostEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:21'!renderFormErrorOn: aCanvas	(errorText) ifNotNil: [ aCanvas label class: 'error-text'; with: errorText ]! !PostEditorComponent subclass: #AnswerEditorComponent	instanceVariableNames: 'question'	classVariableNames: ''	package: 'CuOOra-WebUI'!!AnswerEditorComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 03:28'!post	| answer |	text isEmpty		ifTrue: [ errorText := 'Missing required fields'.			^ self ].	errorText := nil.	answer := self session user postAnswer: text to: question.	self answer: answer! !!AnswerEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 02:25'!formTitle	^ 'Post an answer'! !!AnswerEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 03:12'!question: aQuestion	question := aQuestion! !!AnswerEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 01:49'!question	^ question! !!AnswerEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:12'!renderFormFieldsOn: aCanvas	aCanvas label: 'text'.	aCanvas textArea on: #text of: self! !PostComponent subclass: #QuestionComponent	instanceVariableNames: 'topicCallback questionCallback'	classVariableNames: ''	package: 'CuOOra-WebUI'!!QuestionComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 01:13'!goToTopic: aTopic	^ topicCallback ifNotNil: [ topicCallback value: aTopic ]! !!QuestionComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/11/2021 22:49'!goToQuestion	^ questionCallback ifNotNil: [ questionCallback value: post ]! !!QuestionComponent methodsFor: 'accessing' stamp: 'sufficientname 4/11/2021 22:47'!topicCallback: aBlock	topicCallback := aBlock! !!QuestionComponent methodsFor: 'accessing' stamp: 'sufficientname 4/11/2021 22:51'!questionCallback: aBlock	questionCallback := aBlock! !!QuestionComponent methodsFor: 'rendering' stamp: 'sufficientname 4/11/2021 22:50'!renderTitleOn: aCanvas	aCanvas heading level3		with: [ aCanvas anchor				callback: [ self goToQuestion ];				with: post title ].! !!QuestionComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 04:17'!renderContentOn: aCanvas	aCanvas div		class: 'question';		with: [ self renderUserOn: aCanvas.			self renderDeleteButtonOn: aCanvas.			aCanvas break.			self renderReactionButtonsOn: aCanvas.			self renderTitleOn: aCanvas.			self renderTextOn: aCanvas.			self renderTopicsOn: aCanvas.			aCanvas break.			self renderAnswerCountOn: aCanvas ]! !!QuestionComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 10:23'!renderTopicsOn: aCanvas	post topics		do: [ :topic | 			aCanvas anchor class: 'topic';				callback: [ self goToTopic: topic ];				with: topic name ].! !!QuestionComponent methodsFor: 'rendering' stamp: 'sufficientname 4/11/2021 21:32'!renderAnswerCountOn: aCanvas	aCanvas span with: post answers size printString, ' answers'! !CuOOraComponent subclass: #QuestionDetailComponent	instanceVariableNames: 'question'	classVariableNames: ''	package: 'CuOOra-WebUI'!!QuestionDetailComponent methodsFor: 'accessing' stamp: 'sufficientname 4/11/2021 19:19'!question: aQuestion	question := aQuestion! !!QuestionDetailComponent methodsFor: 'accessing' stamp: 'sufficientname 4/11/2021 19:19'!question	^ question! !!QuestionDetailComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:09'!renderContentOn: aCanvas	aCanvas div		with: [ self renderQuestion: question on: aCanvas.			aCanvas horizontalRule.			aCanvas div				class: 'container';				with: [ self renderAnswers: question answers on: aCanvas ].			aCanvas horizontalRule.			aCanvas anchor				class: 'button';				callback: [ self show: (AnswerEditorComponent new question: question) ];				with: 'Post answer' ]! !PostEditorComponent subclass: #QuestionEditorComponent	instanceVariableNames: 'title topicNames'	classVariableNames: ''	package: 'CuOOra-WebUI'!!QuestionEditorComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:54'!renderFormFieldsOn: aCanvas	aCanvas label: 'title'.	aCanvas textInput on: #title of: self.	aCanvas label: 'text'.	aCanvas textArea on: #text of: self.	aCanvas label: 'topics (comma separated)'.	aCanvas textInput on: #topicNames of: self! !!QuestionEditorComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 03:32'!post	| question topics |	title isEmpty | text isEmpty | topicNames isEmpty		ifTrue: [ errorText := 'Missing required fields'.			^ self ].	errorText := nil.	topics := self parseTopics.	question := self session user postQuestion: text titled: title relatedTo: topics.	self answer: question! !!QuestionEditorComponent methodsFor: 'parsing' stamp: 'sufficientname 4/12/2021 10:09'!parseTopics	^ (topicNames splitOn: ',')		collect:			[ :topicName | CuOOra soleInstance getOrCreateTopicWithName: topicName trim ]! !!QuestionEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 01:57'!title	^ title! !!QuestionEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 02:15'!topicNames	^ topicNames! !!QuestionEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 02:15'!topicNames: aString	topicNames := aString! !!QuestionEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 01:57'!title: aString	title := aString! !!QuestionEditorComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 02:25'!formTitle	^ 'Post a question'! !CredentialsInputComponent subclass: #SignInComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-WebUI'!!SignInComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 10:05'!signIn	| user |	user := CuOOra soleInstance getUserWithUsername: username andPassword: password.	username := ''.	password := ''.	user		ifNil:			[ errorText := 'This combination of user and password does not exist' ]		ifNotNil: [ errorText := ''. self continueAs: user ]! !!SignInComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/10/2021 17:34'!goToSignUp	| user |	user := self call: SignUpComponent new.	user ifNotNil: [ self continueAs: user ]! !!SignInComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 07:12'!renderSubmitButtonOn: aCanvas	aCanvas submitButton		class: 'column';		callback: [ self signIn ];		with: 'Sign In'! !!SignInComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 07:11'!renderAlternativeOn: aCanvas	aCanvas paragraph		with: [ aCanvas text: 'Don''t have an account? '.			aCanvas				anchor callback: [ self goToSignUp ];				with: 'Sign Up' ]! !CredentialsInputComponent subclass: #SignUpComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-WebUI'!!SignUpComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 10:03'!signUp	| user |	user := CuOOra soleInstance		createUserWithUsername: username		andPassword: password.	username := ''.	password := ''.	user		ifNil:			[ errorText := 'The username is already in use' ]		ifNotNil: [ errorText := ''.			self answer: user ]! !!SignUpComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/10/2021 17:35'!goToSignIn	self answer: nil! !!SignUpComponent methodsFor: 'rendering' stamp: 'sufficientname 4/10/2021 06:58'!renderSubmitButtonOn: aCanvas	aCanvas submitButton		class: 'column';		callback: [ self signUp ];		with: 'Sign Up'! !!SignUpComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 03:52'!renderAlternativeOn: aCanvas	aCanvas paragraph		with: [ aCanvas text: 'Have an account? '.			aCanvas				anchor callback: [ self goToSignIn ];				with: 'Sign In' ]! !CuOOraComponent subclass: #TopicDetailComponent	instanceVariableNames: 'topic'	classVariableNames: ''	package: 'CuOOra-WebUI'!!TopicDetailComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:30'!renderContentOn: aCanvas	aCanvas heading with: topic name.	self renderFollowButtonOn: aCanvas.	aCanvas label with: topic description.	aCanvas horizontalRule.	aCanvas heading level3 with: 'Questions:'.	aCanvas div		class: 'container';		with: [ self renderQuestions: topic questions on: aCanvas ]! !!TopicDetailComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:28'!renderFollowButtonOn: aCanvas	| buttonText buttonClass buttonCallback |	(self session user isInterestedIn: topic)		ifTrue: [ buttonText := 'Unfollow'.			buttonClass := 'button button-outline'.			buttonCallback := [ self unfollow: topic ] ]		ifFalse: [ buttonText := 'Follow'.			buttonClass := 'button'.			buttonCallback := [ self follow: topic ] ].	aCanvas anchor		class: buttonClass;		callback: buttonCallback;		with: buttonText! !!TopicDetailComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:29'!unfollow: aTopic	self session user beNotInterestedIn: aTopic! !!TopicDetailComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:29'!follow: aTopic	self session user beInterestedIn: aTopic! !!TopicDetailComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 09:01'!topic	^ topic! !!TopicDetailComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 09:01'!topic: aTopic	topic := aTopic! !CuOOraComponent subclass: #TopicListComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-WebUI'!!TopicListComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:36'!renderContentOn: aCanvas	CuOOra soleInstance topics do: [ :topic | 			aCanvas anchor class: 'topic';				callback: [ parent goToTopic: topic ];				with: topic name ].! !CuOOraComponent subclass: #UserProfileComponent	instanceVariableNames: 'user'	classVariableNames: ''	package: 'CuOOra-WebUI'!!UserProfileComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 08:15'!user: aUser	user := aUser! !!UserProfileComponent methodsFor: 'accessing' stamp: 'sufficientname 4/12/2021 08:15'!user	^ user! !!UserProfileComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:22'!unfollow: aUser	self session user unfollow: aUser! !!UserProfileComponent methodsFor: 'callbacks' stamp: 'sufficientname 4/12/2021 09:22'!follow: aUser	self session user follow: aUser! !!UserProfileComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:25'!renderContentOn: aCanvas	aCanvas heading with: user username.	self renderFollowButtonOn: aCanvas.	aCanvas label with: 'score: ' , user score printString.	aCanvas label with: 'questions: ' , user questions size printString.	aCanvas label with: 'answers: ' , user answers size printString.	aCanvas horizontalRule.	aCanvas heading level3 with: 'Questions:'.	aCanvas div		class: 'container';		with: [ self renderQuestions: user questions on: aCanvas ]! !!UserProfileComponent methodsFor: 'rendering' stamp: 'sufficientname 4/12/2021 09:21'!renderFollowButtonOn: aCanvas	| buttonText buttonClass buttonCallback |	user == self session user		ifTrue: [ ^ self ].	(self session user isFollowing: user)		ifTrue: [ buttonText := 'Unfollow'.			buttonClass := 'button button-outline'.			buttonCallback := [ self unfollow: user ] ]		ifFalse: [ buttonText := 'Follow'.			buttonClass := 'button'.			buttonCallback := [ self follow: user ] ].	aCanvas anchor class: buttonClass; callback: buttonCallback; with: buttonText! !