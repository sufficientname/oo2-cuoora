TestCase subclass: #AnswerTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!AnswerTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:22'!testDelete	| user question answer |	user := User username: 'user1' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	answer := user postAnswer: 'yes' to: question.	answer delete.	self assert: (question hasAnswer: answer) not.	self assert: (user hasAnswer: answer) not! !!AnswerTest methodsFor: 'tests' stamp: 'sufficientname 4/14/2021 15:59'!testAddPostTo	| user answer |	user := User username: 'user' password: 'pass'.	answer := Answer text: 'this is an answer'.	answer addPostTo: user.	self assert: (user hasAnswer: answer)! !!AnswerTest methodsFor: 'tests' stamp: 'sufficientname 4/14/2021 15:59'!testRemovePostFrom	| user answer |	user := User username: 'user' password: 'pass'.	answer := Answer text: 'this is an answer'.	answer addPostTo: user.	answer removePostFrom: user.	self assert: (user hasAnswer: answer) not! !!AnswerTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 06:31'!testText	| answer text |	text := 'this is a text'.	answer := Answer text: text. 	self assert: answer text equals: text! !!AnswerTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 03:56'!testQuestion	| answer question |	question := Question title: 'question' text: 'is this a question'.	answer := Answer text: 'yes'.	answer question: question.	self assert: answer question equals: question.	self assert: (question hasAnswer: answer)! !!AnswerTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:10'!testUser	| user answer |	user := User username: 'user' password: 'pass'.	answer := Answer text: 'this an answer'.	answer user: user.	self assert: answer user equals: user.	self assert: (user hasAnswer: answer)! !TestCase subclass: #CuOOraTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:03'!testUsers	| cuoora user |	cuoora := CuOOra new.	user := User username: 'user' password: 'pass'.	self assert: cuoora users isEmpty.	cuoora addUser: user.	self assert: (cuoora users includes: user)! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:11'!testHasTopic	| cuoora topic |	cuoora := CuOOra new.	topic := Topic name: 'Test topic' description: 'A test topic'.	self assert: (cuoora hasTopic: topic) not.	cuoora addTopic: topic.	self assert: (cuoora hasTopic: topic)! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:08'!testAddTopic	| cuoora topic |	cuoora := CuOOra new.	topic := Topic name: 'Test topic' description: 'A test topic'.	cuoora addTopic: topic.	self assert: (cuoora hasTopic: topic)! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:03'!testTopics	| cuoora topic |	cuoora := CuOOra new.	topic := Topic name: 'Test topic' description: 'A test topic'.	self assert: cuoora topics isEmpty.	cuoora addTopic: topic.	self assert: (cuoora topics includes: topic)! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:09'!testAddUser	| cuoora user |	cuoora := CuOOra new.	user := User username: 'user' password: 'pass'.	cuoora addUser: user.	self assert: (cuoora hasUser: user)! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:03'!testInitialize	| cuoora |	cuoora := CuOOra new.	self assert: cuoora users isEmpty.	self assert: cuoora topics isEmpty! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:10'!testHasUser	| cuoora user |	cuoora := CuOOra new.	user := User username: 'user' password: 'pass'.	self assert: (cuoora hasUser: user) not. 	cuoora addUser: user.	self assert: (cuoora hasUser: user)! !!CuOOraTest methodsFor: 'tests' stamp: 'sufficientname 4/12/2021 10:05'!testGetUserWithUsernameAndPassword	| cuoora user1 user2 |	cuoora := CuOOra new.	user1 := User username: 'user1' password: 'pass1'.	user2 := User username: 'user2' password: 'pass2'.	cuoora addUser: user1.	cuoora addUser: user2.	self assert: (cuoora getUserWithUsername: user1 username andPassword: user1 password) equals: user1.	self assert: (cuoora getUserWithUsername: user1 username andPassword: user2 password) isNil.	self assert: (cuoora getUserWithUsername: 'user3' andPassword: 'pass3') isNil.! !TestCase subclass: #PostTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:03'!testDislikes	| user post |	user := User username: 'user' password: 'pass'.	post := Post new.	self assert: post dislikes isEmpty.	post registerDislikeBy: user.	self assert: (post dislikes anySatisfy: [ :dislike | dislike user == user ])	! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:03'!testLikes	| user post |	user := User username: 'user' password: 'pass'.	post := Post new.	self assert: post likes isEmpty.	post registerLikeBy: user.	self assert: (post likes anySatisfy: [ :like | like user == user ])	! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 20:14'!testRegisterLikeBy	| user post |	user := User username: 'user' password: 'pass'.	post := Post new.	post registerLikeBy: user.	self assert: (post wasLikedBy: user).	post registerLikeBy: user.	self assert: (post wasLikedBy: user) not	! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:03'!testCreatedAt	| post createdAt |	createdAt := DateAndTime now.	post := Post new.	post createdAt: createdAt.	self assert: post createdAt equals: createdAt.! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:04'!testText	| post text |	text := 'this is an entry'.	post := Post new.	post text: text.	self assert: post text equals: text.! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:03'!testInitialize	| post |	post := Post new.	self assert: post likes isEmpty.	self assert: post dislikes isEmpty.! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:04'!testScore	| user1 user2 user3 post |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	user3 := User username: 'user3' password: 'pass'.	post := Post new.	post registerLikeBy: user1.	post registerDislikeBy: user2.	post registerLikeBy: user2.	post registerDislikeBy: user3.	self assert: post score equals: 1! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:04'!testWasLikedBy	| user post |	user := User username: 'user' password: 'pass'.	post := Post new.	self assert: (post wasLikedBy: user) not.	post registerLikeBy: user.	self assert: (post wasLikedBy: user)	! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 20:14'!testRegisterDislikeBy	| user post |	user := User username: 'user' password: 'pass'.	post := Post new.	post registerDislikeBy: user.	self assert: (post wasDislikedBy: user).	post registerDislikeBy: user.	self assert: (post wasDislikedBy: user) not.	! !!PostTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:04'!testWasDislikedBy	| user post |	user := User username: 'user' password: 'pass'.	post := Post new.	self assert: (post wasLikedBy: user) not.	post registerLikeBy: user.	self assert: (post wasLikedBy: user)	! !TestCase subclass: #QuestionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 06:01'!testAddAnswer	| question answer |	question := Question title: 'question' text: 'is this a question?'.	answer := Answer text: 'yes'.	question addAnswer: answer.	self assert: (question hasAnswer: answer).	self assert: answer question equals: question! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 05:07'!testHasAnswer	| question answer |	question := Question title: 'question' text: 'is this a question?'.	answer := Answer text: 'yes'.	self assert: (question hasAnswer: answer) not.	question addAnswer: answer.	self assert: (question hasAnswer: answer)! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 05:06'!testRemoveTopic	| question topic |	question := Question title: 'question' text: 'is this a question?'.	topic := Topic name: 'Test topic' description: 'A test topic'.	question addTopic: topic.	question removeTopic: topic.	self assert: (question topics includes: topic) not.	self assert: (topic questions includes: question) not! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/14/2021 15:58'!testAddEntryTo	| user question |	user := User username: 'user' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	question addPostTo: user.	self assert: (user hasQuestion: question)! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:18'!testDelete	| user1 user2 topic1 topic2 topics question answer1 answer2 |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	topic1 := Topic name: 'topic 1' description: 'A topic'.	topic2 := Topic name: 'topic 2' description: 'Another topic'.	topics := OrderedCollection with: topic1 with: topic2.	question := user1 postQuestion: 'is this a question?' titled: 'question' relatedTo: topics.	answer1 := user1  postAnswer: 'yes' to: question.	answer2 := user2 postAnswer: 'no' to: question.	question delete.	self assert: (user1 hasQuestion: question) not.	self assert: (user1 hasAnswer: answer1) not.	self assert: (user2 hasAnswer: answer2) not.	self assert: (topic1 hasQuestion: question) not.	self assert: (topic2 hasQuestion: question) not! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 04:32'!testAddTopics	| question topic1 topic2 topics |	question := Question new.	topic1 := Topic name: 'Test topic 1' description: 'A test topic'.	topic2 := Topic		name: 'Test topic 2'		description: 'Another test topic'.	topics := Set with: topic1 with: topic2.	question addTopics: topics.	topics do: [ :topic | self assert: (question hasTopic: topic) ]! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 02:04'!testInitialize	| question |	question := Question new.	self assert: question topics isEmpty.	self assert: question answers isEmpty! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 05:06'!testAddTopic	| question topic |	question := Question title: 'question' text: 'is this a question?'.	topic := Topic name: 'Test topic' description: 'A test topic'.	question addTopic: topic.	self assert: (question hasTopic: topic).	self assert: (topic hasQuestion: question)! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 05:06'!testTitle	| question title |	title := 'this is a title'.	question := Question new.	question title: title.	self assert: question title equals: title! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 05:08'!testAnswers	| question answer |	question := Question title: 'question' text: 'is this a question?'.	answer := Answer text: 'yes'.	self assert: question answers isEmpty.	question addAnswer: answer.	self assert: (question answers includes: answer)! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 02:02'!testHasTopic	| question topic |	question := Question title: 'question' text: 'is this a question?'.	topic := Topic name: 'Test topic' description: 'A test topic'.	self assert: (question hasTopic: topic) not.	question addTopic: topic.	self assert: (question hasTopic: topic)! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 06:29'!testTitleText	| question title text |	title := 'this is a title'.	text := 'this is a text'.	question := Question title: title text: text. 	self assert: question title equals: title.	self assert: question text equals: text! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 03:55'!testRemoveAnswer	| question answer |	question := Question title: 'question' text: 'is this a question?'.	answer := Answer text: 'yes'.	question addAnswer: answer.	question removeAnswer: answer.	self assert: (question hasAnswer: answer) not! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/14/2021 15:58'!testRemoveEntryFrom	| user question |	user := User username: 'user' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	question addPostTo: user.	question removePostFrom: user.	self assert: (user hasQuestion: question) not! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 04:33'!testTopics	| question topic |	question := Question new.	topic := Topic name: 'Test topic' description: 'A test topic'.	self assert: question topics isEmpty.	question addTopic: topic.	self assert: (question topics includes: topic)! !!QuestionTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 04:08'!testUser	| user question |	user := User username: 'user' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	question user: user.	self assert: question user equals: user.	self assert: (user hasQuestion: question)! !TestCase subclass: #ReactionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!ReactionTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 02:35'!testLike	| like createdAt |	createdAt := DateAndTime now.	like := Reaction like.	self assert: like kind.	self assert: like createdAt asSeconds closeTo: createdAt asSeconds! !!ReactionTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 02:37'!testDislike	| dislike createdAt |	createdAt := DateAndTime now.	dislike := Reaction dislike.	self assert: dislike kind not.	self assert: dislike createdAt asSeconds closeTo: createdAt asSeconds! !!ReactionTest methodsFor: 'tests' stamp: 'sufficientname 4/6/2021 12:33'!testKind	| reaction kind |	reaction := Reaction new.	kind := true.	reaction kind: kind.	self assert: reaction kind equals: kind! !!ReactionTest methodsFor: 'tests' stamp: 'sufficientname 4/6/2021 12:32'!testUser	| reaction user |	reaction := Reaction new.	user := User username: 'user' password: 'pass'.	reaction user: user.	self assert: reaction user equals: user! !!ReactionTest methodsFor: 'tests' stamp: 'sufficientname 4/6/2021 12:31'!testCreatedAt	| reaction createdAt |	reaction := Reaction new.	createdAt := DateAndTime now.	reaction createdAt: createdAt.	self assert: reaction createdAt equals: createdAt! !TestCase subclass: #TopicTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!TopicTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 01:52'!testAddQuestion	| question topic |	question := Question title: 'question' text: 'is this a question?'.	topic := Topic name: 'Test topic' description: 'A test topic'.	topic addQuestion: question.	self assert: (topic hasQuestion: question).	self assert: (question hasTopic: topic)! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 4/1/2021 20:13'!testInitialize	| topic |	topic := Topic new.	self assert: topic questions isEmpty! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 3/29/2021 03:57'!testDescription	| topic description |	topic := Topic new.	description := 'topic description'.	topic description: description.	self assert: topic description equals: description! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 3/29/2021 03:56'!testName	| topic name |	topic := Topic new.	name := 'topic'.	topic name: name.	self assert: topic name equals: name! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 06:28'!testNameDescription	| topic name description |	name := 'Test topic'.	description := 'A test topic'.	topic := Topic name: name description: description.	self assert: topic name equals: name.	self assert: topic description equals: description! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 01:55'!testQuestions	| topic question |	topic := Topic name: 'Test topic' description: 'A test topic'.	question := Question title: 'question' text: 'is this a question?'.	self assert: topic questions isEmpty.	topic addQuestion: question.	self assert: (topic questions includes: question)! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 01:59'!testRemoveQuestion	| topic question |	topic := Topic name: 'Test topic' description: 'A test topic'.	question := Question title: 'question' text: 'is this a question?'.	topic addQuestion: question.	topic removeQuestion: question.	self assert: (topic questions includes: question) not.	self assert: (question topics includes: topic) not.! !!TopicTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 01:55'!testHasQuestion	| topic question |	topic := Topic name: 'Test topic' description: 'A test topic'.	question := Question title: 'question' text: 'is this a question?'.	self assert: (topic hasQuestion: question) not.	topic addQuestion: question.	self assert: (topic hasQuestion: question)! !TestCase subclass: #UserTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-Tests'!!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 03:51'!testPostQuestionTitledRelatedTo	| user topic1 topic2 topics question title description |	user := User username: 'user' password: 'pass'.	topic1 := Topic name: 'Test topic 1' description: 'A test topic'.	topic2 := Topic name: 'Test topic 2' description: 'Another test topic'.	title := 'question'.	description := 'is this a question?'.	topics := OrderedCollection with: topic1 with: topic2.	question := user postQuestion: description titled: title relatedTo: topics.	"assert user"	self assert: question user equals: user.	self assert: (user hasQuestion: question).	"assert topic"	self assert: question topics equals: topics.	topics do: [ :topic | self assert: (topic hasQuestion: question) ].	"assert title and description"	self assert: question title equals: title.	self assert: question text equals: description				! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 02:21'!testInitialize	| user |	user := User new.	self assert: user following isEmpty.	self assert: user topicsOfInterest isEmpty.	self assert: user questions isEmpty.	self assert: user answers isEmpty.! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 3/29/2021 03:47'!testFollowing	| user1 user2 |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	self assert: user1 following isEmpty.	user1 follow: user2.	self assert: (user1 following includes: user2)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 02:21'!testFollow	| user1 user2 |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	user1 follow: user1.	self assert: (user1 isFollowing: user1) not.	user1 follow: user2.	self assert: (user1 isFollowing: user2)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 3/29/2021 04:25'!testUsernamePassword	| user username password createdAt |	username := 'user'.	password := 'pass'.	createdAt := DateAndTime now.	user := User username: username password: password.	self assert: user username equals: username.	self assert: user password equals: password.	self assert: user createdAt asSeconds closeTo: createdAt asSeconds ! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 05:43'!testQuestions	| user question |	user := User username: 'user' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	self assert: user questions isEmpty.	user addQuestion: question.	self assert: (user questions includes: question)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:53'!testPassword	| user password |	password := 'pass'.	user := User new.	user password: password.	self assert: user password equals: password! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 09:35'!testRelevantQuestions	| user1 user2 user3 topic1 topic2 question1 question2 question3 question4 relevantQuestions |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	user3 := User username: 'user3' password: 'pass'.	topic1 := Topic name: 'topic1' description: 'topic1'.	topic2 := Topic name: 'topic2' description: 'topic2'.	user1 follow: user2.	user1 beInterestedIn: topic2.	"posteada por el usuario que sigue en el topico que no sigue. score=0"	question1 := user2		postQuestion: 'question1'		titled: 'question1'		relatedTo: (Set with: topic1).	self assert: question1 score equals: 0.	"posteada por el usuario que sigue en el topico que sigue. score=-1"	question2 := user2		postQuestion: 'question2'		titled: 'question2'		relatedTo: (Set with: topic2).	question2 registerDislikeBy: user2.	self assert: question2 score equals: -1.	"posteada por el usuario que no sigue en el topico que sigue. score=1"	question3 := user3		postQuestion: 'question3'		titled: 'question3'		relatedTo: (Set with: topic2).	question3 registerLikeBy: user3.	self assert: question3 score equals: 1.	"posteada por el usuario que no sigue en el topic que no sigue"	question4 := user3		postQuestion: 'question4'		titled: 'question4'		relatedTo: (Set with: topic1).	"relevant questions"	relevantQuestions := user1 relevantQuestions.	self assert: relevantQuestions size equals: 3.	self assert: (relevantQuestions includes: question4) not.	self assert: relevantQuestions first equals: question3.	self assert: relevantQuestions second equals: question1.	self assert: relevantQuestions last equals: question2! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:54'!testBeNotInterestedIn	| user topic |	user := User username: 'user' password: 'pass'.	topic := Topic name: 'Test topic' description: 'A test topic'.	user beInterestedIn: topic.	user beNotInterestedIn: topic.	self assert: (user isInterestedIn: topic) not! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 06:07'!testPostAnswerTo	| user1 user2 topic question answer text |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	topic := Topic name: 'Test topic' description: 'A test topic'.	question := user2		postQuestion: 'is this a question'		titled: 'question'		relatedTo: (Set with: topic).	text := 'yes'.	answer := user1 postAnswer: text to: question.	"assert user"	self assert: answer user equals: user1.	self assert: (user1 hasAnswer: answer).	"assert question"	self assert: answer question equals: question.	self assert: (question hasAnswer: answer).	"assert text"	self assert: answer text equals: text! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 09:57'!testScore	| user1 user2 topic question1 question2 answer1 answer2 answer3 |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	topic := Topic name: 'Test topic' description: 'A test topic'.	"pregunta que hizo 20pts"	question1 := user1		postQuestion: 'question1'		titled: 'question1'		relatedTo: (Set with: topic).	"pregunta con un dislike score=-1"	question1 registerDislikeBy: user2.	"respuesta a su misma pregunta 0pts"	answer1 := user1 postAnswer: 'answer1' to: question1.	"respuesta con un like score=1"	answer1 registerLikeBy: user1.	"pregunta de otro usuario"	question2 := user2		postQuestion: 'question2'		titled: 'question2'		relatedTo: (Set with: topic).	answer2 := user2 postAnswer: 'answer2' to: question2.	answer2 registerLikeBy: user1.	"respuesta a pregunta de otro usuario 50pts"	answer3 := user1 postAnswer: 'answer3' to: question2.	"respuesta con 2 likes score=2"	answer3 registerLikeBy: user1.	answer3 registerLikeBy: user2.	self assert: user1 score equals: 20 + -1 + 1 + 50 + 2! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:55'!testTopicsOfInterest	| user topic |	user := User username: 'user' password: 'pass'.	topic := Topic name: 'Test topic' description: 'A test topic'.	self assert: user topicsOfInterest isEmpty.	user beInterestedIn: topic.	self assert: (user topicsOfInterest includes: topic)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:53'!testIsInterestedIn	| user topic |	user := User username: 'user' password: 'pass'.	topic := Topic name: 'Test topic' description: 'A test topic'. 	self assert: (user topicsOfInterest includes: topic) not.	user beInterestedIn: topic.	self assert: (user topicsOfInterest includes: topic)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:53'!testHasAnswer	| user answer |	user := User username: 'user' password: 'pass'.	answer := Answer new text: 'this this an answer'.	self assert: (user hasAnswer: answer) not.	user addAnswer: answer.	self assert: (user hasAnswer: answer)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 03:00'!testRemoveAnswer	| user answer |	user := User username: 'user' password: 'pass'.	answer := Answer new text: 'this this an answer'.	user addAnswer: answer.	user removeAnswer: answer.	self assert: (user hasAnswer: answer) not! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 02:22'!testUnfollow	| user1 user2 |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	user1 follow: user2.	user1 unfollow: user2.	self assert: (user1 isFollowing: user2) not! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 3/29/2021 03:34'!testCreatedAt	| user createdAt |	createdAt := DateAndTime now.	user := User new.	user createdAt: createdAt.	self assert: user createdAt equals: createdAt.! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:53'!testUsername	| user username |	username := 'username'.	user := User new.	user username: username.	self assert: user username equals: username! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:17'!testIsFollowing	| user1 user2 |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	self assert: (user1 following includes: user2) not.	user1 follow: user2.	self assert: (user1 following includes: user2)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 04:25'!testAddAnswer	| user1 user2 answer |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	answer := Answer new text: 'this this an answer'.	user1 addAnswer: answer.	self assert: (user1 hasAnswer: answer).	self assert: answer user equals: user1.	user2 addAnswer: answer.	self assert: (user1 hasAnswer: answer) not.	self assert: (user2 hasAnswer: answer).	self assert: answer user equals: user2! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:54'!testAnswers	| user answer |	user := User username: 'user' password: 'pass'.	answer := Answer new text: 'this this an answer'.	self assert: user answers isEmpty.	user addAnswer: answer.	self assert: (user hasAnswer: answer)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:53'!testHasQuestion	| user question |	user := User username: 'user' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	self assert: (user hasQuestion: question) not.	user addQuestion: question.	self assert: (user hasQuestion: question)! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/10/2021 03:00'!testRemoveQuestion	| user question |	user := User username: 'user' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	user addQuestion: question.	user removeQuestion: question.	self assert: (user hasQuestion: question) not! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 04:24'!testAddQuestion	| user1 user2 question |	user1 := User username: 'user1' password: 'pass'.	user2 := User username: 'user2' password: 'pass'.	question := Question title: 'question' text: 'is this a question?'.	user1 addQuestion: question.	self assert: (user1 hasQuestion: question).	self assert: question user equals: user1.	user2 addQuestion: question.	self assert: (user1 hasQuestion: question) not.	self assert: (user2 hasQuestion: question).	self assert: question user equals: user2! !!UserTest methodsFor: 'tests' stamp: 'sufficientname 4/3/2021 03:54'!testBeInterestedIn	| user topic |	user := User username: 'user' password: 'pass'.	topic := Topic name: 'Test topic' description: 'A test topic'.	user beInterestedIn: topic.	self assert: (user isInterestedIn: topic)! !