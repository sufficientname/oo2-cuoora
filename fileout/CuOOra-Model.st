Object subclass: #CuOOra	instanceVariableNames: 'users topics'	classVariableNames: ''	package: 'CuOOra-Model'!!CuOOra methodsFor: 'accessing' stamp: 'sufficientname 4/1/2021 19:18'!users	^ users! !!CuOOra methodsFor: 'accessing' stamp: 'sufficientname 4/1/2021 19:18'!topics	^ topics! !!CuOOra methodsFor: 'initialization' stamp: 'sufficientname 4/10/2021 03:03'!initialize	super initialize.	users := OrderedCollection new.	topics := OrderedCollection new! !!CuOOra methodsFor: 'testing' stamp: 'sufficientname 4/1/2021 20:06'!hasUser: aUser	^ users includes: aUser! !!CuOOra methodsFor: 'testing' stamp: 'sufficientname 4/1/2021 20:07'!hasTopic: aTopic	^ topics includes: aTopic! !!CuOOra methodsFor: 'adding' stamp: 'sufficientname 4/1/2021 20:06'!addUser: aUser	(self hasUser: aUser)		ifFalse: [ users add: aUser ]! !!CuOOra methodsFor: 'adding' stamp: 'sufficientname 4/1/2021 20:07'!addTopic: aTopic	(self hasTopic: aTopic)		ifFalse: [ topics add: aTopic ]! !!CuOOra methodsFor: 'other' stamp: 'sufficientname 4/12/2021 10:05'!getUserWithUsername: aUsername andPassword: aPassword	^ users		detect: [ :user | user username = aUsername and: user password = aPassword ]		ifNone: [ nil ]! !!CuOOra methodsFor: 'other' stamp: 'sufficientname 4/12/2021 09:58'!createUserWithUsername: aUsername andPassword: aPassword	^ (users anySatisfy: [ :user | user username = aUsername ])		ifTrue: [ nil ]		ifFalse: [ | user |			user := User username: aUsername password: aPassword.			self addUser: user.			user ]! !!CuOOra methodsFor: 'other' stamp: 'sufficientname 4/12/2021 10:11'!getOrCreateTopicWithName: aName	^ topics		detect: [ :each | each name = aName ]		ifNone: [ | topic |			topic := Topic new name: aName.			self addTopic: topic.			topic ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'soleInstance'!!CuOOra class methodsFor: 'instance creation' stamp: 'sufficientname 4/12/2021 10:17'!soleInstanceFill	| user1 user2 user3 topic1 topic2 topic3 question1 question2 question3 question4 relevantQuestions |	user1 := User username: 'usernameusername1' password: 'pass'.	user2 := User username: 'usernameusername2' password: 'pass'.	user3 := User username: 'usernameusername3' password: 'pass'.	topic1 := Topic name: 'topic1' description: 'topic1'.	topic2 := Topic name: 'topic2' description: 'topic2'.	topic3 := Topic name: 'topic3' description: 'topic3'.	user1 follow: user2.	user1 beInterestedIn: topic2.	question1 := user2		postQuestion: 'Lo que dice el titulo, me preguntaba si puedo preguntar algo como esto.'		titled: 'Es esta una pregunta valida?'		relatedTo: (Set with: topic1 with: topic2 with: topic3).	question2 := user2		postQuestion: 'Lo que dice el titulo, me preguntaba si puedo preguntar algo como esto.'		titled: 'Es esta una pregunta valida?'		relatedTo: (Set with: topic2).	question2 registerDislikeBy: user2.	question3 := user3		postQuestion: 'Lo que dice el titulo, me preguntaba si puedo preguntar algo como esto.'		titled: 'Es esta una pregunta valida?'		relatedTo: (Set with: topic2).	question3 registerLikeBy: user3.	question4 := user3		postQuestion: 'question4'		titled: 'question4'		relatedTo: (Set with: topic1).	relevantQuestions := user1 relevantQuestions.	user2 postAnswer: 'No, este tipo de preguntas no estan permitidas' to: question1.	user3 postAnswer: 'Exactamente como dijo @user2' to: question1.	user1 postAnswer: 'Muchas gracias!!' to: question1. 	self soleInstance addTopic: topic1; addTopic: topic2.	self soleInstance addUser: user1; addUser: user2; addUser: user3.! !!CuOOra class methodsFor: 'instance creation' stamp: 'sufficientname 4/10/2021 07:16'!soleInstance	^ soleInstance ifNil: [ soleInstance := self new ]! !!CuOOra class methodsFor: 'instance creation' stamp: 'sufficientname 4/12/2021 10:16'!soleInstanceClear	soleInstance := nil! !Object subclass: #Post	instanceVariableNames: 'text user likes dislikes createdAt'	classVariableNames: ''	package: 'CuOOra-Model'!!Post methodsFor: 'private' stamp: 'sufficientname 4/3/2021 04:06'!removeEntryFrom: aUser	self subclassResponsibility! !!Post methodsFor: 'private' stamp: 'sufficientname 4/3/2021 02:43'!addEntryTo: aUser	self subclassResponsibility! !!Post methodsFor: 'accessing' stamp: 'sufficientname 4/6/2021 11:37'!dislikes	^ dislikes! !!Post methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:35'!createdAt	^ createdAt! !!Post methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 02:58'!user: aUser	aUser == user		ifTrue: [ ^ self ].	user ifNotNil: [ self removeEntryFrom: user ].	self addEntryTo: aUser.	user := aUser! !!Post methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:36'!text: aString	text := aString! !!Post methodsFor: 'accessing' stamp: 'sufficientname 4/6/2021 11:36'!likes	^ likes! !!Post methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:35'!user	^ user! !!Post methodsFor: 'accessing' stamp: 'sufficientname 4/6/2021 11:55'!score	^ likes size - dislikes size! !!Post methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:36'!createdAt: aDateAndTime	createdAt := aDateAndTime! !!Post methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:35'!text	^ text! !!Post methodsFor: 'testing' stamp: 'sufficientname 4/6/2021 11:39'!wasDislikedBy: aUser	^ dislikes anySatisfy: [ :dislike | dislike user == aUser ]! !!Post methodsFor: 'testing' stamp: 'sufficientname 4/6/2021 11:38'!wasLikedBy: aUser	^ likes anySatisfy: [ :like | like user == aUser ]! !!Post methodsFor: 'deleting' stamp: 'sufficientname 4/3/2021 04:47'!delete	self removeEntryFrom: user! !!Post methodsFor: 'initialization' stamp: 'sufficientname 4/10/2021 03:03'!initialize	super initialize.	likes := OrderedCollection new.	dislikes := OrderedCollection new! !!Post methodsFor: 'adding' stamp: 'sufficientname 4/12/2021 10:14'!registerLikeBy: aUser	likes		detect: [ :each | each user == aUser ]		ifFound: [ :it | 			likes remove: it.			^ self ]		ifNone: [  ].	dislikes		detect: [ :each | each user == aUser ]		ifFound: [ :it | dislikes remove: it ]		ifNone: [  ].	likes add: (Reaction like user: aUser)! !!Post methodsFor: 'adding' stamp: 'sufficientname 4/12/2021 10:14'!registerDislikeBy: aUser	dislikes		detect: [ :each | each user == aUser ]		ifFound: [ :it | 			dislikes remove: it.			^ self ]		ifNone: [  ].	likes		detect: [ :each | each user == aUser ]		ifFound: [ :it | likes remove: it ]		ifNone: [  ].	dislikes add: (Reaction dislike user: aUser)! !Post subclass: #Answer	instanceVariableNames: 'question'	classVariableNames: ''	package: 'CuOOra-Model'!!Answer methodsFor: 'accessing' stamp: 'sufficientname 4/10/2021 03:53'!question: aQuestion	aQuestion == question		ifTrue: [ ^ self ].	question ifNotNil: [ question removeAnswer: self ].	aQuestion addAnswer: self.	question := aQuestion! !!Answer methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 05:55'!question	^ question! !!Answer methodsFor: 'private' stamp: 'sufficientname 4/3/2021 04:07'!removeEntryFrom: aUser	aUser removeAnswer: self! !!Answer methodsFor: 'private' stamp: 'sufficientname 4/3/2021 02:44'!addEntryTo: aUser	aUser addAnswer: self! !!Answer methodsFor: 'deleting' stamp: 'sufficientname 4/3/2021 06:05'!delete	super delete.	question removeAnswer: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation' stamp: 'sufficientname 4/10/2021 13:17'!text: aText	^ self new		text: aText;		createdAt: DateAndTime now;		yourself! !Post subclass: #Question	instanceVariableNames: 'title topics answers'	classVariableNames: ''	package: 'CuOOra-Model'!!Question methodsFor: 'deleting' stamp: 'sufficientname 4/10/2021 03:51'!delete	super delete.	topics copy do: [ :topic | topic removeQuestion: self ].	answers copy do: [ :answer | answer delete ]! !!Question methodsFor: 'testing' stamp: 'sufficientname 4/3/2021 01:45'!hasTopic: aTopic	^ topics includes: aTopic! !!Question methodsFor: 'testing' stamp: 'sufficientname 4/3/2021 04:41'!hasAnswer: anAnswer	^ answers includes: anAnswer! !!Question methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:37'!topics	^ topics! !!Question methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:37'!answers	^ answers! !!Question methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:37'!title	^ title! !!Question methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:38'!title: aString	title := aString! !!Question methodsFor: 'private' stamp: 'sufficientname 4/3/2021 04:08'!removeEntryFrom: aUser	aUser removeQuestion: self! !!Question methodsFor: 'private' stamp: 'sufficientname 4/3/2021 02:45'!addEntryTo: aUser	aUser addQuestion: self! !!Question methodsFor: 'initialization' stamp: 'sufficientname 4/10/2021 03:03'!initialize	super initialize.	topics := OrderedCollection new.	answers := OrderedCollection new! !!Question methodsFor: 'adding' stamp: 'sufficientname 4/3/2021 04:29'!addTopics: aTopicCollection	aTopicCollection do: [ :topic | self addTopic: topic ]! !!Question methodsFor: 'adding' stamp: 'sufficientname 4/3/2021 05:58'!addAnswer: anAnswer	(self hasAnswer: anAnswer)		ifTrue: [ ^ self ].	answers add: anAnswer.	anAnswer question: self! !!Question methodsFor: 'adding' stamp: 'sufficientname 4/3/2021 04:42'!addTopic: aTopic	(self hasTopic: aTopic)		ifTrue: [ ^ self ].	topics add: aTopic.	aTopic addQuestion: self! !!Question methodsFor: 'removing' stamp: 'sufficientname 4/10/2021 03:53'!removeAnswer: anAnswer	answers remove: anAnswer ifAbsent: [ ^ self ]! !!Question methodsFor: 'removing' stamp: 'sufficientname 4/10/2021 03:40'!removeTopic: aTopic	topics remove: aTopic ifAbsent: [ ^ self ].	aTopic removeQuestion: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation' stamp: 'sufficientname 4/10/2021 13:18'!title: aTitle text: aText	^ self new		title: aTitle;		text: aText;		createdAt: DateAndTime now;		yourself! !Object subclass: #Reaction	instanceVariableNames: 'user kind createdAt'	classVariableNames: ''	package: 'CuOOra-Model'!!Reaction methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 06:51'!user: aUser	user := aUser! !!Reaction methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 06:53'!createdAt: aDateAndTime	createdAt := aDateAndTime! !!Reaction methodsFor: 'accessing' stamp: 'sufficientname 4/6/2021 11:49'!kind: aBoolean	kind := aBoolean! !!Reaction methodsFor: 'accessing' stamp: 'sufficientname 4/6/2021 11:49'!kind	^ kind! !!Reaction methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 06:51'!user	^ user! !!Reaction methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 06:53'!createdAt	^ createdAt! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Reaction class	instanceVariableNames: ''!!Reaction class methodsFor: 'instance creation' stamp: 'sufficientname 4/10/2021 02:28'!dislike	^ self new		kind: false;		createdAt: DateAndTime now;		yourself! !!Reaction class methodsFor: 'instance creation' stamp: 'sufficientname 4/10/2021 02:31'!like	^ self new		kind: true;		createdAt: DateAndTime now;		yourself! !Object subclass: #Topic	instanceVariableNames: 'name description questions'	classVariableNames: ''	package: 'CuOOra-Model'!!Topic methodsFor: 'adding' stamp: 'sufficientname 4/3/2021 04:43'!addQuestion: aQuestion	(self hasQuestion: aQuestion)		ifTrue: [ ^ self ].	questions add: aQuestion.	aQuestion addTopic: self! !!Topic methodsFor: 'removing' stamp: 'sufficientname 4/10/2021 03:41'!removeQuestion: aQuestion	questions remove: aQuestion ifAbsent: [ ^ self ].	aQuestion removeTopic: self	! !!Topic methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:54'!description	^ description! !!Topic methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 04:09'!questions	^ questions! !!Topic methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:54'!name	^ name! !!Topic methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:54'!name: aString	name := aString! !!Topic methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:54'!description: aString	description := aString! !!Topic methodsFor: 'initialization' stamp: 'sufficientname 4/10/2021 03:03'!initialize	super initialize.	questions := OrderedCollection new! !!Topic methodsFor: 'testing' stamp: 'sufficientname 4/1/2021 20:18'!hasQuestion: aQuestion	^ questions includes: aQuestion! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'instance creation' stamp: 'sufficientname 4/1/2021 19:55'!name: aName description: aDescription	^ self new		name: aName;		description: aDescription;		yourself! !Object subclass: #User	instanceVariableNames: 'username password following topicsOfInterest questions answers createdAt'	classVariableNames: ''	package: 'CuOOra-Model'!!User methodsFor: 'removing' stamp: 'sufficientname 4/1/2021 19:33'!unfollow: aUser	(self isFollowing: aUser)		ifTrue: [ following remove: aUser ]! !!User methodsFor: 'removing' stamp: 'sufficientname 4/10/2021 03:45'!removeAnswer: anAnswer	answers remove: anAnswer ifAbsent: [ ^ self ]! !!User methodsFor: 'removing' stamp: 'sufficientname 4/10/2021 03:46'!removeQuestion: aQuestion	questions remove: aQuestion ifAbsent: [ ^ self ]! !!User methodsFor: 'removing' stamp: 'sufficientname 4/1/2021 19:38'!beNotInterestedIn: aTopic	(self isInterestedIn: aTopic)		ifTrue: [ topicsOfInterest remove: aTopic ]! !!User methodsFor: 'adding' stamp: 'sufficientname 4/3/2021 04:38'!addAnswer: anAnswer	(self hasAnswer: anAnswer)		ifTrue: [ ^ self ].	answers add: anAnswer.	anAnswer user: self! !!User methodsFor: 'adding' stamp: 'sufficientname 4/3/2021 04:38'!addQuestion: aQuestion	(self hasQuestion: aQuestion)		ifTrue: [ ^ self ].	questions add: aQuestion.	aQuestion user: self! !!User methodsFor: 'adding' stamp: 'sufficientname 4/1/2021 19:31'!follow: aUser	((self isFollowing: aUser) or: self == aUser)		ifFalse: [ following add: aUser ]! !!User methodsFor: 'adding' stamp: 'sufficientname 4/1/2021 19:37'!beInterestedIn: aTopic	(self isInterestedIn: aTopic)		ifFalse: [ topicsOfInterest add: aTopic ]! !!User methodsFor: 'initialization' stamp: 'sufficientname 4/10/2021 03:03'!initialize	super initialize.	following := OrderedCollection new.	topicsOfInterest := OrderedCollection new.	questions := OrderedCollection new.	answers := OrderedCollection new! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!questions	^ questions! !!User methodsFor: 'accessing' stamp: 'sufficientname 4/1/2021 19:32'!topicsOfInterest	^ topicsOfInterest! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!following	^ following! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!createdAt	^ createdAt! !!User methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 08:55'!relevantQuestions	| relevantQuestions |	relevantQuestions := Set new.	relevantQuestions addAll: (following flatCollect: [ :user | user questions ]).	relevantQuestions addAll: (topicsOfInterest flatCollect: [ :topic | topic questions ]).	^ relevantQuestions sorted: [ :questionA :questionB | questionA score >= questionB score ]		 		 ! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!password: aString	password := aString! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!username	^ username! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!answers	^ answers! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:16'!username: aString	username := aString! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:18'!createdAt: aDateAndTime	createdAt := aDateAndTime! !!User methodsFor: 'accessing' stamp: 'sufficientname 4/3/2021 09:22'!score	| pointsPerQuestion pointsPerAnswer scoreQuestions scoreAnswers scoreReactionQuestions scoreReactionAnswers |	pointsPerQuestion := 20.	pointsPerAnswer := 50.	scoreQuestions := questions size * pointsPerQuestion.	scoreAnswers := (answers		reject: [ :answer | answer question user == self ]) size		* pointsPerAnswer.	scoreReactionQuestions := questions		inject: 0		into: [ :sum :question | sum + question score ].	scoreReactionAnswers := answers		inject: 0		into: [ :sum :answer | sum + answer score ].	^ scoreQuestions + scoreAnswers + scoreReactionQuestions + scoreReactionAnswers! !!User methodsFor: 'accessing' stamp: 'sufficientname 3/29/2021 03:17'!password	^ password! !!User methodsFor: 'other' stamp: 'sufficientname 4/10/2021 13:17'!postAnswer: answerString to: aQuestion	| answer |	answer := Answer text: answerString.	self addAnswer: answer.	aQuestion addAnswer: answer.	^ answer! !!User methodsFor: 'other' stamp: 'sufficientname 4/5/2021 23:30'!postQuestion: questionString titled: titleString relatedTo: aTopicCollection	| question |	question := Question title: titleString text: questionString.	self addQuestion: question.	question addTopics: aTopicCollection.	^ question	! !!User methodsFor: 'testing' stamp: 'sufficientname 3/29/2021 03:35'!isFollowing: aUser	^ following includes: aUser! !!User methodsFor: 'testing' stamp: 'sufficientname 4/1/2021 19:32'!isInterestedIn: aTopic	^ topicsOfInterest includes: aTopic! !!User methodsFor: 'testing' stamp: 'sufficientname 4/3/2021 03:09'!hasQuestion: aQuestion	^ questions includes: aQuestion! !!User methodsFor: 'testing' stamp: 'sufficientname 4/3/2021 03:11'!hasAnswer: anAnswer	^ answers includes: anAnswer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance creation' stamp: 'sufficientname 3/29/2021 03:37'!username: aUsername password: aPassword	^ self new		username: aUsername;		password: aPassword;		createdAt: DateAndTime now;		yourself! !